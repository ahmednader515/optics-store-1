generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  name      String
  role      String       @default("User")
  password  String?
  image     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  phone     String       @unique
  email     String?      @unique
  orders    Order[]
  reviews   Review[]
  address   UserAddress?

  @@map("users")
}

model UserAddress {
  id         String   @id @default(cuid())
  userId     String   @unique
  fullName   String
  street     String
  city       String
  province   String
  postalCode String
  country    String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model Product {
  id                         String      @id @default(cuid())
  name                       String
  slug                       String      @unique
  category                   String
  images                     String[]
  brand                      String
  description                String
  price                      Decimal     @db.Decimal(10, 2)
  listPrice                  Decimal     @db.Decimal(10, 2)
  countInStock               Int
  tags                       String[]    @default([])
  colors                     String[]    @default(["White", "Red", "Black"])
  sizes                      String[]    @default(["S", "M", "L"])
  avgRating                  Float       @default(0)
  numReviews                 Int         @default(0)
  ratingDistribution         Json?
  numSales                   Int         @default(0)
  isPublished                Boolean     @default(false)
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  lensSizes                  String[]    @default([])
  glassesShape               String?
  requiresMedicalCertificate Boolean     @default(false)
  deliveryPrice              Decimal     @default(0) @db.Decimal(10, 2)
  deliveryTime               Int         @default(1)
  subcategories              String[]    @default([])
  orderItems                 OrderItem[]
  reviews                    Review[]

  @@map("products")
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  slug          String        @unique
  isActive      Boolean       @default(true)
  sortOrder     Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  image         String?
  subcategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
  @@map("subcategories")
}

model Review {
  id                 String   @id @default(cuid())
  userId             String
  productId          String
  isVerifiedPurchase Boolean  @default(false)
  rating             Int
  title              String
  comment            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Order {
  id                      String                @id @default(cuid())
  userId                  String
  expectedDeliveryDate    DateTime
  paymentMethod           String
  paymentResult           Json?
  itemsPrice              Decimal               @db.Decimal(10, 2)
  shippingPrice           Decimal               @db.Decimal(10, 2)
  taxPrice                Decimal               @db.Decimal(10, 2)
  totalPrice              Decimal               @db.Decimal(10, 2)
  isPaid                  Boolean               @default(false)
  paidAt                  DateTime?
  isOutForDelivery        Boolean               @default(false)
  outForDeliveryAt        DateTime?
  isDelivered             Boolean               @default(false)
  deliveredAt             DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  medicalCertificateImage String?
  lensType                String?
  orderItems              OrderItem[]
  shippingAddress         OrderShippingAddress?
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  clientId     String
  name         String
  slug         String
  category     String
  quantity     Int
  countInStock Int
  image        String
  price        Decimal  @db.Decimal(10, 2)
  size         String?
  color        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OrderShippingAddress {
  id        String   @id @default(cuid())
  orderId   String   @unique
  street    String
  province  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  apartment String?
  area      String
  building  String?
  floor     String?
  landmark  String?
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_shipping_addresses")
}

model Setting {
  id                      String   @id @default(cuid())
  common                  Json
  site                    Json
  carousels               Json
  availableLanguages      Json
  defaultLanguage         String
  availableCurrencies     Json
  defaultCurrency         String
  availablePaymentMethods Json
  defaultPaymentMethod    String
  availableDeliveryDates  Json
  defaultDeliveryDate     String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  videos                  Json?    @default("[]")
  chatContent             Json?    @default("{}")
  deliverySettings        Json?    @default("{}")
  productPricing          Json?    @default("{}")
  taxSettings             Json?    @default("{}")

  @@map("settings")
}

model WebPage {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("web_pages")
}
